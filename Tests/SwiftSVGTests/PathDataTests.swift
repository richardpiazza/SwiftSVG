import XCTest
@testable import SwiftSVG

final class PathDataTests: XCTestCase {
    
    func testDataFormatAppleSymbols() throws {
        let pathData = "M 11.709 2.91016 C 17.1582 2.91016 21.6699 -1.60156 21.6699 -7.05078 " +
        "C 21.6699 -12.4902 17.1484 -17.0117 11.6992 -17.0117 C 6.25977 -17.0117 1.74805 -12.4902 1.74805 -7.05078 " +
        "C 1.74805 -1.60156 6.26953 2.91016 11.709 2.91016 Z M 11.709 1.25 C 7.09961 1.25 3.41797 -2.44141 3.41797 -7.05078 " +
        "C 3.41797 -11.6504 7.08984 -15.3516 11.6992 -15.3516 C 16.3086 -15.3516 20 -11.6504 20.0098 -7.05078 " +
        "C 20.0195 -2.44141 16.3184 1.25 11.709 1.25 Z M 11.6895 -2.41211 C 12.207 -2.41211 12.5195 -2.77344 12.5195 -3.33984 " +
        "L 12.5195 -6.23047 L 15.5762 -6.23047 C 16.123 -6.23047 16.5039 -6.51367 16.5039 -7.03125 " +
        "C 16.5039 -7.55859 16.1426 -7.86133 15.5762 -7.86133 L 12.5195 -7.86133 L 12.5195 -10.9277 " +
        "C 12.5195 -11.5039 12.207 -11.8555 11.6895 -11.8555 C 11.1719 -11.8555 10.8789 -11.4844 10.8789 -10.9277 " +
        "L 10.8789 -7.86133 L 7.83203 -7.86133 C 7.26562 -7.86133 6.89453 -7.55859 6.89453 -7.03125 " +
        "C 6.89453 -6.51367 7.28516 -6.23047 7.83203 -6.23047 L 10.8789 -6.23047 L 10.8789 -3.33984 " +
        "C 10.8789 -2.79297 11.1719 -2.41211 11.6895 -2.41211 Z"
        
        let path = Path(data: pathData)
        let commands = try path.commands()
        XCTAssertEqual(commands.count, 30)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.move) }).count, 3)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.close) }).count, 3)
    }
    
    func testDataFormatPixelmatorPro() throws {
        let pathData = "M96.083 307 C82.23 307 71 295.77 71 281.917 L71 145.75 C71 131.899 82.23 120.667 96.083 120.667 " +
        "96.083 120.667 109.056 120.667 128.522 120.667 128.522 92.001 151.578 92 155.425 92 185.826 92 210.976 92.056 243.595 92.056 " +
        "252.61 92.056 271.87 95.585 271.87 120.667 291.116 120.667 303.916 120.667 303.916 120.667 317.768 120.667 329 131.899 329 145.75 " +
        "L329 281.917 C329 295.77 317.768 307 303.916 307 L96.083 307 Z M200 264 C231.663 264 257.333 238.332 257.333 206.667 " +
        "257.333 175.004 231.663 149.334 200 149.334 168.335 149.334 142.666 175.004 142.666 206.667 142.666 238.332 168.335 264 200 264 Z " +
        "M200 235.334 C184.167 235.334 171.333 222.499 171.333 206.667 171.333 190.836 184.167 178 200 178 " +
        "215.831 178 228.667 190.836 228.667 206.667 228.667 222.499 215.831 235.334 200 235.334 Z"
        
        let path = Path(data: pathData)
        let commands = try path.commands()
        XCTAssertEqual(commands.count, 26)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.move) }).count, 3)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.close) }).count, 3)
    }
    
    func testDataFormatSketch() throws {
        let pathData = "M22,40.333 C11.875,40.333 3.667,32.125 3.667,22 C3.667,21.988 3.668,21.976 3.668,21.964 " +
        "L14.481,21.964 L19.74,34.229 L25.544,18.92 L27.31,21.964 L33,21.964 C34.013,21.964 34.833,21.143 34.833,20.131 " +
        "C34.833,19.118 34.013,18.297 33,18.297 L29.422,18.297 L24.849,10.413 L19.531,24.437 L16.898,18.297 " +
        "L4.041,18.297 C5.754,9.947 13.143,3.666 22,3.666 C32.125,3.666 40.333,11.875 40.333,22 " +
        "C40.333,32.125 32.125,40.333 22,40.333 M22,0 C9.85,0 0,9.85 0,22 C0,34.15 9.85,44 22,44 " +
        "C34.15,44 44,34.15 44,22 C44,9.85 34.15,0 22,0"
        
        let path = Path(data: pathData)
        let commands = try path.commands()
        XCTAssertEqual(commands.count, 23)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.move) }).count, 2)
        XCTAssertEqual(commands.filter({ $0.hasPrefix(.close) }).count, 0)
    }
    
    func testRelativePath() throws {
        let absolute = "M217.074 360.93 C145.835 360.93 88.022 303.209 88.022 231.958 88.022 160.578 145.835 102.899 217.074 102.899 288.375 102.899 346.116 160.578 346.116 231.958 346.116 303.209 288.375 360.93 217.074 360.93 M217.074 38.459 C110.278 38.459 23.675 125.084 23.675 231.958 23.675 338.75 110.278 425.348 217.074 425.348 323.916 425.348 410.655 338.75 410.655 231.958 410.655 125.084 323.916 38.459 217.074 38.459 Z"
        let relative = "M217.074,360.93c-71.239,0-129.052-57.721-129.052-128.972c0-71.38,57.813-129.059,129.052-129.059c71.301,0,129.042,57.679,129.042,129.059C346.116,303.209,288.375,360.93,217.074,360.93 M217.074,38.459c-106.796,0-193.399,86.625-193.399,193.499c0,106.792,86.603,193.39,193.399,193.39c106.842,0,193.581-86.598,193.581-193.39C410.655,125.084,323.916,38.459,217.074,38.459z"
        
        let absolutePath = Path(data: absolute)
        let relativePath = Path(data: relative)
        
        let absoluteCommands = try absolutePath.commands()
        let relativeCommands = try relativePath.commands()
        
        XCTAssertEqual(absoluteCommands.count, relativeCommands.count)
        
        for i in 0..<absoluteCommands.count {
            XCTAssertRoughlyEqual(absoluteCommands[i], relativeCommands[i])
        }
    }
    
    func testCompareFormats() throws {
        let sketchFormat = "M49.231,365 C49.231,365 42.771,306.868 98.187,294.192 C153.604,281.515 170.121,279.704 173.864,267.482 " +
        "C177.606,255.26 178.315,231.869 178.315,231.869 C178.315,231.869 160.526,215.862 152.719,195.979 " +
        "C144.912,176.095 142.703,164.818 142.703,164.818 C142.703,164.818 136.176,163.653 133.939,152.019 " +
        "C131.702,140.386 123.234,128.367 124.897,120.024 C126.867,110.139 133.383,116.129 133.383,116.129 " +
        "C133.383,116.129 133.073,77.174 154.806,56.45 C159.22,52.241 173.586,53.807 173.586,53.807 " +
        "C173.586,53.807 175.811,36 211.146,36 C241.413,36 262.37,47.578 275.555,72.865 C288.739,98.152 284.875,115.572 284.875,115.572 " +
        "C284.875,115.572 294.131,110.734 294.056,124.475 C293.981,138.216 286.348,146.528 285.431,151.88 " +
        "C284.515,157.233 283.719,164.773 276.667,165.374 C273.99,177.367 273.57,185.877 263.313,203.212 " +
        "C253.056,220.548 240.498,231.591 240.498,231.591 C240.498,231.591 240.289,257.337 244.811,267.204 " +
        "C249.333,277.071 318.742,294.869 336.207,307.685 C353.671,320.501 351.927,364.999 351.927,364.999 L49.231,365 Z"
        
        let appleSymbolsFormat = "M 49.231 365 C 49.231 365 42.771 306.868 98.187 294.192 C 153.604 281.515 170.121 279.704 173.864 267.482 " +
        "C 177.606 255.26 178.315 231.869 178.315 231.869 C 178.315 231.869 160.526 215.862 152.719 195.979 " +
        "C 144.912 176.095 142.703 164.818 142.703 164.818 C 142.703 164.818 136.176 163.653 133.939 152.019 " +
        "C 131.702 140.386 123.234 128.367 124.897 120.024 C 126.867 110.139 133.383 116.129 133.383 116.129 " +
        "C 133.383 116.129 133.073 77.174 154.806 56.45 C 159.22 52.241 173.586 53.807 173.586 53.807 " +
        "C 173.586 53.807 175.811 36 211.146 36 C 241.413 36 262.37 47.578 275.555 72.865 C 288.739 98.152 284.875 115.572 284.875 115.572 " +
        "C 284.875 115.572 294.131 110.734 294.056 124.475 C 293.981 138.216 286.348 146.528 285.431 151.88 " +
        "C 284.515 157.233 283.719 164.773 276.667 165.374 C 273.99 177.367 273.57 185.877 263.313 203.212 " +
        "C 253.056 220.548 240.498 231.591 240.498 231.591 C 240.498 231.591 240.289 257.337 244.811 267.204 " +
        "C 249.333 277.071 318.742 294.869 336.207 307.685 C 353.671 320.501 351.927 364.999 351.927 364.999 L 49.231 365 Z"
        
        let pixelmatorFormat = "M49.231 365 C49.231 365 42.771 306.868 98.187 294.192 153.604 281.515 170.121 279.704 173.864 267.482 " +
        "177.606 255.26 178.315 231.869 178.315 231.869 178.315 231.869 160.526 215.862 152.719 195.979 " +
        "144.912 176.095 142.703 164.818 142.703 164.818 142.703 164.818 136.176 163.653 133.939 152.019 " +
        "131.702 140.386 123.234 128.367 124.897 120.024 126.867 110.139 133.383 116.129 133.383 116.129 " +
        "133.383 116.129 133.073 77.174 154.806 56.45 159.22 52.241 173.586 53.807 173.586 53.807 173.586 53.807 " +
        "175.811 36 211.146 36 241.413 36 262.37 47.578 275.555 72.865 288.739 98.152 284.875 115.572 284.875 115.572 " +
        "284.875 115.572 294.131 110.734 294.056 124.475 293.981 138.216 286.348 146.528 285.431 151.88 " +
        "284.515 157.233 283.719 164.773 276.667 165.374 273.99 177.367 273.57 185.877 263.313 203.212 " +
        "253.056 220.548 240.498 231.591 240.498 231.591 240.498 231.591 240.289 257.337 244.811 267.204 " +
        "249.333 277.071 318.742 294.869 336.207 307.685 353.671 320.501 351.927 364.999 351.927 364.999 L49.231 365 Z"
        
        let sketchPath = Path(data: sketchFormat)
        let appleSymbolsPath = Path(data: appleSymbolsFormat)
        let pixelmatorPath = Path(data: pixelmatorFormat)
        
        let sketchCommands = try sketchPath.commands()
        let appleSymbolsCommands = try appleSymbolsPath.commands()
        let pixelmatorCommands = try pixelmatorPath.commands()
        
        XCTAssertEqual(sketchCommands.count, appleSymbolsCommands.count)
        XCTAssertEqual(appleSymbolsCommands.count, pixelmatorCommands.count)
        XCTAssertEqual(pixelmatorCommands.count, sketchCommands.count)
        
        for i in 0..<sketchCommands.count {
            XCTAssertRoughlyEqual(sketchCommands[i], appleSymbolsCommands[i])
            XCTAssertRoughlyEqual(appleSymbolsCommands[i], pixelmatorCommands[i])
            XCTAssertRoughlyEqual(pixelmatorCommands[i], sketchCommands[i])
        }
    }
    
    func testSingleValueProcessing() throws {
        let data = "M170.488 118.443h-.537v2.368h.322v-1.936l.752 1.936h.43l.645-1.936v1.936h.429v-2.368h-.644l-.645 1.83-.752-1.83z"
        
        let path = Path(data: data)
        let commands = try path.commands()
        commands.forEach({ print($0) })
        XCTAssertEqual(commands.count, 15)
    }
    
//    func testRelativeToAbsolute() throws {
//        let relative = """
//        <svg width="2500" height="1055" viewBox="0 0 256 108" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet"><path d="M152.984 37.214c-5.597 0-9.765 2.748-9.765 9.362 0 4.983 2.747 8.443 9.463 8.443 5.693 0 9.56-3.355 9.56-8.65 0-6-3.46-9.155-9.258-9.155zm-11.19 46.701c-1.325 1.625-2.645 3.353-2.645 5.39 0 4.067 5.186 5.291 12.31 5.291 5.9 0 13.938-.414 13.938-5.9 0-3.261-3.867-3.462-8.753-3.768l-14.85-1.013zm30.113-46.394c1.828 2.34 3.764 5.597 3.764 10.276 0 11.292-8.851 17.904-21.667 17.904-3.259 0-6.209-.406-8.038-.914l-3.359 5.39 9.969.61c17.602 1.122 27.975 1.632 27.975 15.157 0 11.702-10.272 18.311-27.975 18.311-18.413 0-25.433-4.68-25.433-12.716 0-4.578 2.035-7.015 5.596-10.378-3.358-1.419-4.476-3.961-4.476-6.71 0-2.24 1.118-4.273 2.952-6.208 1.83-1.93 3.864-3.865 6.306-6.103-4.984-2.442-8.75-7.732-8.75-15.262 0-11.697 7.733-19.731 23.295-19.731 4.376 0 7.022.402 9.362 1.017h19.84v8.644l-9.361.713zM199.166 19.034c-5.8 0-9.157-3.36-9.157-9.161 0-5.793 3.356-8.95 9.157-8.95 5.9 0 9.258 3.157 9.258 8.95 0 5.801-3.357 9.161-9.258 9.161zM186.04 80.171v-8.033l5.19-.71c1.425-.205 1.627-.509 1.627-2.038V39.48c0-1.116-.304-1.832-1.325-2.134l-5.492-1.935 1.118-8.238h21.061V69.39c0 1.63.098 1.833 1.629 2.039l5.188.71v8.032H186.04zM255.267 76.227c-4.376 2.135-10.785 4.068-16.586 4.068-12.106 0-16.682-4.878-16.682-16.38V37.264c0-.61 0-1.017-.817-1.017h-7.12V27.19c8.955-1.02 12.513-5.496 13.632-16.585h9.666v14.45c0 .71 0 1.017.815 1.017h14.343v10.173H237.36v24.313c0 6.002 1.426 8.34 6.917 8.34 2.852 0 5.799-.71 8.24-1.626l2.75 8.954" fill="#2F2707"/></svg>
//        """
//
//        let absolute = """
//        <?xml version="1.0" encoding="UTF-8"?>
//        <svg width="256px" height="108px" viewBox="0 0 256 108" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">
//         <!-- Generated by Pixelmator Pro 1.6.4 -->
//         <path id="Path" d="M152.984 37.214 C147.387 37.214 143.219 39.962 143.219 46.576 143.219 51.559 145.966 55.019 152.682 55.019 158.375 55.019 162.242 51.664 162.242 46.369 162.242 40.369 158.782 37.214 152.984 37.214 Z M141.794 83.915 C140.469 85.54 139.149 87.268 139.149 89.305 139.149 93.372 144.335 94.596 151.459 94.596 157.359 94.596 165.397 94.182 165.397 88.696 165.397 85.435 161.53 85.234 156.644 84.928 Z M171.907 37.521 C173.735 39.861 175.671 43.118 175.671 47.797 175.671 59.089 166.82 65.701 154.004 65.701 150.745 65.701 147.795 65.295 145.966 64.787 L142.607 70.177 152.576 70.787 C170.178 71.909 180.551 72.419 180.551 85.944 180.551 97.646 170.279 104.255 152.576 104.255 134.163 104.255 127.143 99.575 127.143 91.539 127.143 86.961 129.178 84.524 132.739 81.161 129.381 79.742 128.263 77.2 128.263 74.451 128.263 72.211 129.381 70.178 131.215 68.243 133.045 66.313 135.079 64.378 137.521 62.14 132.537 59.698 128.771 54.408 128.771 46.878 128.771 35.181 136.504 27.147 152.066 27.147 156.442 27.147 159.088 27.549 161.428 28.164 L181.268 28.164 181.268 36.808 Z M199.166 19.034 C193.366 19.034 190.009 15.674 190.009 9.873 190.009 4.08 193.365 0.923 199.166 0.923 205.066 0.923 208.424 4.08 208.424 9.873 208.424 15.674 205.067 19.034 199.166 19.034 Z M186.04 80.171 L186.04 72.138 191.23 71.428 C192.655 71.223 192.857 70.919 192.857 69.39 L192.857 39.48 C192.857 38.364 192.553 37.648 191.532 37.346 L186.04 35.411 187.158 27.173 208.219 27.173 208.219 69.39 C208.219 71.02 208.317 71.223 209.848 71.429 L215.036 72.139 215.036 80.171 Z M255.267 76.227 C250.891 78.362 244.482 80.295 238.681 80.295 226.575 80.295 221.999 75.417 221.999 63.915 L221.999 37.264 C221.999 36.654 221.999 36.247 221.182 36.247 L214.062 36.247 214.062 27.19 C223.017 26.17 226.575 21.694 227.694 10.605 L237.36 10.605 237.36 25.055 C237.36 25.765 237.36 26.072 238.175 26.072 L252.518 26.072 252.518 36.245 237.36 36.245 237.36 60.558 C237.36 66.56 238.786 68.898 244.277 68.898 247.129 68.898 250.076 68.188 252.517 67.272 L255.267 76.226" fill="#2f2707" fill-opacity="1" stroke="none"/>
//        </svg>
//        """
//
//        let relativeData = try XCTUnwrap(relative.data(using: .utf8))
//        let relativeSVG = try SVG.make(with: relativeData)
//        let relativeCommands = try XCTUnwrap(relativeSVG.paths?.first?.commands())
//
//        let absoluteData = try XCTUnwrap(absolute.data(using: .utf8))
//        let absoluteSVG = try SVG.make(with: absoluteData)
//        let absoluteCommands = try XCTUnwrap(absoluteSVG.paths?.first?.commands())
//
//        for i in 0...68 {
//            let lhs = relativeCommands[i]
//            let rhs = absoluteCommands[i]
//            print("""
//
//            Relative: \(lhs)
//            Absolute: \(rhs)
//
//            """)
//        }
//
//        XCTAssertRoughlyEqual(relativeCommands, absoluteCommands)
//    }
    
    func testInvalidRelativeCommand() throws {
        let doc = """
        <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="2500" height="2500">
            <style>.st0{fill:#00a1f1}.st1{fill:#fff}</style>
            <g id="g6983">
                <path id="rect2984" class="st0" d="M64 0h384c35.3 0 64 28.7 64 64v384c0 35.3-28.7 64-64 64H64c-35.3 0-64-28.7-64-64V64C0 28.7 28.7 0 64 0z"/>
                <g id="g3372" transform="translate(-5338.792 -6028.476) scale(15.99685)">
                    <g id="g3368" transform="translate(.446 -.045)">
                        <path id="path3366" class="st0" d="M355.8 380.4s0 .1 0 0c-.7 1.2-.8 2.7-1.1 4v.1c-.1 1.4-.6 2.9-.3 4.3v.1l.2.2s.1 0 .2-.1c.2-.1.2-.3.3-.6 0 0 0-.1.1-.1v-.1c.6-2.4 1-4.9.8-7.3 0-.1 0-.2-.2-.3l-.2-.2h.2c.1 0 .1 0 0 0 0 0 .1 0 0 0z"/>
                        <path id="path3364" class="st0" d="M361.4 381.6c-1 .5-1.6 1.7-2.3 2.7v.2c-.9 1.6-2.1 3.2-2.2 5.1 0 .3.2.4.3.5.2 0 .5-.1.6-.2 1.6-2.3 2.9-4.9 3.9-7.5.1-.2.1-.2 0-.3 0-.4-.2-.5-.3-.5z"/>
                    </g>
                    <path id="path3302" class="st0" d="M345.7 382.3c-.2 0-.4.2-.6.2-.6.2-1 .8-1.1 1.4-.2.6-.1 1.4 0 2.1.1.7.2 1.5.4 2.1.1.5.2.7.3.9v.1c0 .1 0 0-.1.1v.1s-.1.1-.2.1-.2 0-.3-.1c-.1 0-.2-.1-.2-.1s-.1 0-.1-.1l-.1-.2c-.1-.2-.2-.4-.3-.7-.2-.6-.6-1.2-.9-1.9-.3-.6-.8-1.2-1.2-1.6-.2-.2-.5-.4-.8-.5-.3-.1-.6 0-.8.1-.7.4-1.1 1-1.2 1.7-.2.7-.1 1.4 0 2.1.1.7.3 1.2.4 1.7 0 .2.1.4.1.5 0 .1 0 .3-.1.4-.1.4-.4 1.1-.4 1.1s-5.5 14.5 6.2 13.5c.1 0 .3-.1.4-.1 2.3-.5 4.5-1.2 6.4-1.9.4-.2.9-.4 1.4-.6 1.1-.5 2.5-1.2 3.9-1.9s2.6-1.5 3.6-2.4c1-.8 1.7-1.8 1.5-2.7-.2-1.5-1.2-2.6-2.5-3.4-1.3-.9-3-1.4-4.6-1.9-1.6-.4-3.2-.8-4.4-1-.6-.1-1.2-.1-1.5-.2-.1 0-.2 0-.2-.1h-.1s-.1 0-.1-.1v-.1-.9c0-.7-.1-1.7-.2-2.7-.2-.9-.4-1.8-.9-2.4-.3-.4-.7-.6-1.2-.6-.2 0-.4-.1-.5 0z"/>
                </g>
            </g>
            <g id="g18086" transform="translate(-14628.123 -100339.87) scale(4.67988)">
                <g id="bag_1_" transform="translate(2886.772 21269.267)">
                    <g id="handles_1_">
                        <path id="path205" class="st1" d="M292.3 191.3c-3.7 1.3-6.4 2.4-6.4 9.4v3.4l2.2-.4v-2.9c-.1-4.8 1.2-5.8 4.4-7.2 0-.9 0-1.7-.2-2.3z"/>
                        <path id="path207" class="st1" d="M298.7 189.8c.1.7.3 1.4.3 2.2 5.8-.8 5.7 1.6 5.7 6.5v1.8l2.2-.4v-1.4c0-7.7-1.2-9.8-8.2-8.7z"/>
                        <path id="path209" class="st1" d="M276 206.1v-10.2c-.1-6.3 3.2-8.2 9.2-9.6 9-2.1 9.6 3.7 9.6 7.4v8.6l2.2-.4v-8c0-7-2.2-12.3-12.3-10-5.4 1.2-10.9 2.6-10.9 11.8v10.8l2.2-.4z"/>
                    </g>
                    <path id="path211" class="st1" d="M318 200.4l-60.8 12.2v44.2L318 269l12.1-4.4v-59.7l-12.1-4.5zm-34.2 47.2l-13.5-1.9v-11.2h13.5v13.1zm0-14.8h-13.5v-10.3l13.5-1.9v12.2zm18.7 17.4l-17-2.5v-13.2h17v15.7zm0-17.4h-17v-12.3l17-2.5v14.8z"/>
                </g>
            </g>
        </svg>
        """
        
        let data = try XCTUnwrap(doc.data(using: .utf8))
        let svg = try SVG.make(with: data)
        XCTAssertNoThrow(try svg.subpaths())
    }
}
